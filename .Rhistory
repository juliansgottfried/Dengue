library(panelPomp)
library(tidyverse)
library(doParallel)
library(doRNG)
seed <- 9087235
set.seed(seed)
n_array <- 1
array_id <- 1
n_cores=1
fit_name <- "run_7_17_j"
n_refine <- 2
nseq <- n_cores
repo_path="/scratch/jg8461/Dengue/"
path=paste0(repo_path,fit_name,"/")
source(paste0(repo_path,"/helpers/helper_functions.R"))
source(paste0(path,"object.R"))
ppo <- construct_panel_pomp(path,nseq)
init_vals <- read_csv(paste0(path,"pars.csv"),show_col_types=FALSE)
len <- nseq/n_array
init_vals <- init_vals[((array_id-1)*len+1):(array_id*len),]
non_ivp <- c(0.02,0.01,0.001)
ivp     <- c(0.01,0.005,0.001)
cut_names <- unlist(lapply(str_split(names(init_vals),"\\["),\(.).[1]))
est_pars <- unique(cut_names[apply(init_vals,2,\(.)diff(range(.)))!=0])
lapply(1:3,function(i) {
    paste0(paste0("rdd",i),
           "<-rw_sd(",
           paste0(est_pars,ifelse(str_sub(est_pars,-2,-1)!="_0",
                                  paste0("=",non_ivp[i]),
                                  paste0("=ivp(",ivp[i],")")),
                  collapse=","),")") %>%
        str2expression %>%
        eval.parent
})
ppo
po <- ppo
    parameters <- init_vals
    seed_num <- seed
    Np1=5
    Np2=5
    Nmif=5
i <- 1
param <- as.numeric(parameters[i, ])
        names(param) <- colnames(parameters)
param
rdds = list(rdd1,rdd2,rdd3)
        keys <- names(po@unit_objects)
keys
rdds
mifout <- tryCatch(po |>
                               mif2(Np = Np1,
                                    Nmif = Nmif,
                                    cooling.type = "geometric",
                                    cooling.fraction.50 = 0.5,
                                    start = param,
                                    rw.sd = rdds[[1]]),
                           error = function(e) e)
mifout
rdd1
rdds[[1]]
rdd1
print(rdd1)
summary(rdd1)
lapply(1:3,function(i) {
    paste0(paste0("rdd",i),
           "<-rw_sd(",
           paste0(est_pars,ifelse(str_sub(est_pars,-2,-1)!="_0",
                                  paste0("=",non_ivp[i]),
                                  paste0("=ivp(",ivp[i],")")),
                  collapse=","),")") %>%
        str2expression %>%
        eval.parent
})
rdd1@call
est_pars
cut_names <- unlist(lapply(str_split(names(init_vals),"\\["),\(.).[1]))
cut_names
est_pars <- unique(cut_names[apply(init_vals,2,\(.)diff(range(.)))!=0])
est_pars
apply(init_vals,2,\(.)diff(range(.)))!=0
apply(init_vals,2,\(.) {diff(range(.))})!=0
apply(init_vals,2,\(.) range(.))
init_vals
init_vals <- read_csv(paste0(path,"pars.csv"),show_col_types=FALSE)
init_vals
len <- nseq/n_array
init_vals <- init_vals[((array_id-1)*len+1):(array_id*len),]
init_vas
init_vals
init_vals <- read_csv(paste0(path,"pars.csv"),show_col_types=FALSE)
n_array
nseq
init_vals <- read_csv(paste0(path,"pars.csv"),show_col_types=FALSE)
cut_names <- unlist(lapply(str_split(names(init_vals),"\\["),\(.).[1]))
est_pars <- unique(cut_names[apply(init_vals,2,\(.)diff(range(.)))!=0])
lapply(1:3,function(i) {
    paste0(paste0("rdd",i),
           "<-rw_sd(",
           paste0(est_pars,ifelse(str_sub(est_pars,-2,-1)!="_0",
                                  paste0("=",non_ivp[i]),
                                  paste0("=ivp(",ivp[i],")")),
                  collapse=","),")") %>%
        str2expression %>%
        eval.parent
})
len <- nseq/n_array
init_vals <- init_vals[((array_id-1)*len+1):(array_id*len),]
non_ivp <- c(0.02,0.01,0.001)
ivp     <- c(0.01,0.005,0.001)
init_vals
rdd1
lapply(1:3,function(i) {
    paste0(paste0("rdd",i),
           "<-rw_sd(",
           paste0(est_pars,ifelse(str_sub(est_pars,-2,-1)!="_0",
                                  paste0("=",non_ivp[i]),
                                  paste0("=ivp(",ivp[i],")")),
                  collapse=","),")") %>%
        str2expression %>%
        eval.parent
})
rdd1
rdd2
 po <- ppo
    parameters <- init_vals
    seed_num <- seed
    Np1=5
    Np2=5
    Nmif=5
i=1
rdds = list(rdd1,rdd2,rdd3)
        keys <- names(po@unit_objects)
rdds[[1]]
keys
mifout <- tryCatch(po |>
                               mif2(Np = Np1,
                                    Nmif = Nmif,
                                    cooling.type = "geometric",
                                    cooling.fraction.50 = 0.5,
                                    start = param,
                                    rw.sd = rdds[[1]]),
                           error = function(e) e)
mifout
get_trace <- function(i) {
            lapply(keys,\(.) {
                data.frame(mifout@unit_objects[[.]]@traces,iter=0:Nmif,run=i,unit=.)
                }) |> bind_rows()
        }
traces <- get_trace(1)
traces
if (n_refine > 0) {
                for (j in 1:n_refine) {
                        mifout <- mifout |> mif2(rw.sd=rdds[[j+1]])
                        traces_j <- get_trace(j+1)
                        traces <- bind_rows(traces,traces_j)
                }
        }
traces
stats <- lapply(keys,\(.) {
            data.frame(cond=mifout@unit_objects[[.]]@cond.logLik,
                       eff=mifout@unit_objects[[.]]@eff.sample.size,
                       time=mifout@unit_objects[[.]]@times,
                       unit=.)
            }) |> bind_rows()
stats
traces
resultw <- c(rep(NA, length(param) + 4))
        names(resultw) <- c("sample",colnames(parameters),
                           "loglik","loglik.se","flag")
        
        unique_pars <- c(names(shared(po)),rownames(specific(po)))
        resultl <- matrix(rep(NA, length(keys)*(length(unique_pars) + 5)),nrow=length(keys))
        colnames(resultl) <- c("sample","unit",unique_pars,
                               "loglik","loglik.se","flag")
        resultl <- data.frame(resultl)
        resultl$unit <- keys
        
        resultw["sample"] <- i
        resultl$sample <- i
loglik_mif <- tryCatch(replicate(n = 10,
                                             logLik(pfilter(po,
                                                            params = coef(mifout),
                                                            Np = Np2))),
                                   error = function(e) e)
loglik_mif
bl <- logmeanexp(loglik_mif, se = TRUE)
                names(bl) <- c("loglik","loglik.se")
                loglik_mif_est <- bl[1]
                cat(paste(i, loglik_mif_est, "\n"), file = log_path, append = TRUE)
                
                resultw["flag"] <- 2
                resultl$flag <- 2
bl <- logmeanexp(loglik_mif, se = TRUE)
                names(bl) <- c("loglik","loglik.se")
                loglik_mif_est <- bl[1]
resultw["flag"] <- 2
                resultl$flag <- 2
esultw[names(bl)] <- bl
                resultl[,names(bl)] <- t(matrix(bl))[rep(1,length(keys)),]
                
                resultw["flag"] <- 1
                resultl$flag <- 1
                
                par_out <- coef(mifout)
                resultw[names(par_out)] <- par_out
                
                par_out <- specific(mifout) |>
                    t() |>
                    data.frame() |> 
                    bind_cols(data.frame(t(shared(mifout))))
                
                resultl[,colnames(par_out)] <- par_out
resultw[names(bl)] <- bl
                resultl[,names(bl)] <- t(matrix(bl))[rep(1,length(keys)),]
                
                resultw["flag"] <- 1
                resultl$flag <- 1
                
                par_out <- coef(mifout)
                resultw[names(par_out)] <- par_out
                
                par_out <- specific(mifout) |>
                    t() |>
                    data.frame() |> 
                    bind_cols(data.frame(t(shared(mifout))))
                
                resultl[,colnames(par_out)] <- par_out
resultw
resultl
result2
result2
resultw
repo_path
traces_path=paste0(repo_path,"traces.csv")
stats_path=paste0(repo_path,"stats.csv")
if (file.exists(traces_path)) {
            read_csv(traces_path) %>% bind_rows(traces) %>% write_csv(traces_path)
        } else write_csv(traces,traces_path)
if (file.exists(stats_path)) {
            read_csv(stats_path) %>% bind_rows(stats) %>% write_csv(stats_path)
        } else write_csv(stats,stats_path)
log_path=paste0(repo_path,"log.txt")
cat(paste("Starting iteration", i, "\n"),
            file = log_path,
            append = TRUE)
if (file.exists(stats_path)) {
            read_csv(stats_path) %>% bind_rows(stats) %>% write_csv(stats_path)
        } else write_csv(stats,stats_path)
if (file.exists(traces_path)) {
            read_csv(traces_path) %>% bind_rows(traces) %>% write_csv(traces_path)
        } else write_csv(traces,traces_path)
length(coef(mifout)
length(coef(mifout))
is.numeric(loglik_mif)
cat(paste(i, loglik_mif_est, "\n"), file = log_path, append = TRUE)
cat(paste(i, "failed", "\n"), file = log_path, append = TRUE)
list(resultw,resultl)
rs=list(resultw,resultw)
rs=list(list(resultw,resultl),list(resultw,resultl))
rs
rw <- lapply(rs,\(. ).[[1]]) |> 
        bind_rows() |>
        remove_missing()
rw
rl <- lapply(rs,\(. ).[[2]]) |> 
        bind_rows() |>
        remove_missing()
rl
resultw_path=paste0(repo_path,"resultw.csv")
resultl_path=paste0(repo_path,"resultl.csv")
write.table(rw, 
                resultw_path,
                append = TRUE,
                col.names = !file.exists(resultw_path),
                row.names = FALSE, sep = ",")
write.table(rl, 
                resultl_path,
                append = TRUE,
                col.names = !file.exists(resultl_path),
                row.names = FALSE, sep = ",")
q()
library(panelPomp)
library(tidyverse)
library(doParallel)
library(doRNG)
seed <- 9087235
set.seed(seed)
n_array=1
array_id=1
n_cores=1
fit_name="run_7_17_j"
n_refine=1
nseq=10
log_name  <- Sys.getenv("LOGNAME")
repo_path <- paste0("/scratch/",log_name,"/Dengue")
path      <- paste0(repo_path,"/folders_for_fit/",fit_name,"/")
source(paste0(repo_path,"/helpers/helper_functions.R"))
source(paste0(path,"object.R"))
ppo <- construct_panel_pomp(path,nseq)
init_vals <- read_csv(paste0(path,"pars.csv"),show_col_types=FALSE)
len <- nseq/n_array
init_vals <- init_vals[((array_id-1)*len+1):(array_id*len),]
init_vals
non_ivp <- c(0.02,0.01,0.001)
ivp     <- c(0.01,0.005,0.001)
cut_names <- unlist(lapply(str_split(names(init_vals),"\\["),\(.).[1]))
est_pars <- unique(cut_names[apply(init_vals,2,\(.)diff(range(.)))!=0])
lapply(1:3,function(i) {
    paste0(paste0("rdd",i),
           "<-rw_sd(",
           paste0(est_pars,ifelse(str_sub(est_pars,-2,-1)!="_0",
                                  paste0("=",non_ivp[i]),
                                  paste0("=ivp(",ivp[i],")")),
                  collapse=","),")") %>%
        str2expression %>%
        eval.parent
})
est_pars
parameters=init_vals
seed_num=seed
Np1=5
Np2=5
Nmif=5
resultw_path=paste0(repo_path,"/out/results/",fit_name,"/",as.character(array_id),".csv")
resultl_path=paste0(repo_path,"/out/results_long/",fit_name,"/",as.character(array_id),".csv")
log_path=paste0(repo_path,"/out/log/",fit_name,"/",as.character(array_id),".txt")
traces_path=paste0(repo_path,"/out/traces/",fit_name,"/",as.character(array_id),".csv")
stats_path=paste0(repo_path,"/out/stats/",fit_name,"/",as.character(array_id),".csv")
i=1
param <- as.numeric(parameters[i, ])
        names(param) <- colnames(parameters)
        
        cat(paste("Starting iteration", i, "\n"),
            file = log_path,
            append = TRUE)
paramn
param
log_path
cat(paste("Starting iteration", i, "\n"),
            file = log_path,
            append = TRUE)
rdds = list(rdd1,rdd2,rdd3)
        keys <- names(po@unit_objects)
 mifout <- tryCatch(po |>
                               mif2(Np = Np1,
                                    Nmif = Nmif,
                                    cooling.type = "geometric",
                                    cooling.fraction.50 = 0.5,
                                    start = param,
                                    rw.sd = rdds[[1]]),
                           error = function(e) e)
mifout
get_trace <- function(i) {
            lapply(keys,\(.) {
                data.frame(mifout@unit_objects[[.]]@traces,iter=0:Nmif,run=i,unit=.)
                }) |> bind_rows()
        }
traces <- get_trace(1)
n_refine
if (n_refine > 0) {
                for (j in 1:n_refine) {
                        mifout <- mifout |> mif2(rw.sd=rdds[[j+1]])
                        traces_j <- get_trace(j+1)
                        traces <- bind_rows(traces,traces_j)
                }
        }
if (file.exists(traces_path)) {
            read_csv(traces_path) %>% bind_rows(traces) %>% write_csv(traces_path)
        } else write_csv(traces,traces_path)
        
        stats <- lapply(keys,\(.) {
            data.frame(cond=mifout@unit_objects[[.]]@cond.logLik,
                       eff=mifout@unit_objects[[.]]@eff.sample.size,
                       time=mifout@unit_objects[[.]]@times,
                       unit=.)
            }) |> bind_rows()
        if (file.exists(stats_path)) {
            read_csv(stats_path) %>% bind_rows(stats) %>% write_csv(stats_path)
        } else write_csv(stats,stats_path)
        
        resultw <- c(rep(NA, length(param) + 4))
        names(resultw) <- c("sample",colnames(parameters),
                           "loglik","loglik.se","flag")
        
        unique_pars <- c(names(shared(po)),rownames(specific(po)))
        resultl <- matrix(rep(NA, length(keys)*(length(unique_pars) + 5)),nrow=length(keys))
        colnames(resultl) <- c("sample","unit",unique_pars,
                               "loglik","loglik.se","flag")
        resultl <- data.frame(resultl)
        resultl$unit <- keys
        
        resultw["sample"] <- i
        resultl$sample <- i
        
        if (length(coef(mifout)) > 0) {
            loglik_mif <- tryCatch(replicate(n = 10,
                                             logLik(pfilter(po,
                                                            params = coef(mifout),
                                                            Np = Np2))),
                                   error = function(e) e)
            
            if (is.numeric(loglik_mif)) {
                bl <- logmeanexp(loglik_mif, se = TRUE)
                names(bl) <- c("loglik","loglik.se")
                loglik_mif_est <- bl[1]
                cat(paste(i, loglik_mif_est, "\n"), file = log_path, append = TRUE)
                
                resultw["flag"] <- 2
                resultl$flag <- 2
            }
            if (is.numeric(loglik_mif)) {
                resultw[names(bl)] <- bl
                resultl[,names(bl)] <- t(matrix(bl))[rep(1,length(keys)),]
                
                resultw["flag"] <- 1
                resultl$flag <- 1
                
                par_out <- coef(mifout)
                resultw[names(par_out)] <- par_out
                
                par_out <- specific(mifout) |>
                    t() |>
                    data.frame() |> 
                    bind_cols(data.frame(t(shared(mifout))))
                
                resultl[,colnames(par_out)] <- par_out
            }
        } else {
            resultw["flag"] <- 3
            resultl$flag <- 3
            cat(paste(i, "failed", "\n"), file = log_path, append = TRUE)
        }
        list(resultw,resultl)
rw=result1
rw=resultw
rl=resultl
write.table(rw, 
                resultw_path,
                append = TRUE,
                col.names = !file.exists(resultw_path),
                row.names = FALSE, sep = ",")
write.table(rl, 
                resultl_path,
                append = TRUE,
                col.names = !file.exists(resultl_path),
                row.names = FALSE, sep = ",")
q
q()
q()
